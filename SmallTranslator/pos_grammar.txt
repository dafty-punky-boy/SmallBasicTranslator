// REGLAS SINTACTICAS
program : statements ;

// NO sé cómo escribir esta parte
statements : statement statements_prime ;
statements_prime : statement statements_prime | sub statements_prime;

sub : 'SUB' ID subbody 'ENDSUB' ;
subbody : (statement)*;

statement : if_statement | while_loop | for_loop | buildit | goto | identifiersentences ;

identifiersentences : identifier characteristic ;
identifier : ID (array)? ;
array : (TKN_LEFT_BRAC expression TKN_RIGHT_BRAC)+ ;

characteristic : TKN_COLON | TKN_LEFT_PAREN TKN_RIGHT_PAREN | TKN_EQUALS expression ;

literal : TKN_NUMBER | TKN_TEXT | identifier | TRUE | FALSE | buildit | TKN_LEFT_PAREN expression TKN_RIGHT_PAREN ;

if_statement : 'IF' TKN_LEFT_PAREN expression TKN_RIGHT_PAREN 'THEN' statements (elseif)* (else)? 'ENDIF' ;
elseif : 'ELSEIF' TKN_LEFT_PAREN expression TKN_RIGHT_PAREN 'THEN' statements;
else : 'ELSE' statements;

for_loop : 'FOR' identifiersentences 'TO' expression (step)? statements 'ENDFOR' ;
step : 'STEP' e;

goto : 'GOTO' ID ;

buildit : buildit_words TKN_PERIOD identifier TKN_LEFT_PAREN (argument_body (TKN_COMMA argument_body)*)? TKN_RIGHT_PAREN ;
buildit_words : 'Program' | 'Stack' | 'Array' | 'TextWindow';

argument_body : (expression)? ;

expression : expressionbool expression_prima? | TKN_MINUS expression ;
expression_prima : OR expressionbool | ;
expressionbool : expressionrel bool_prima? ;
bool_prima : AND expressionrel bool_prima? | ;
expressionrel : e relprima ;
relprima : oprel e | ;
e : t e_prima? ;
e_prima : opsuma t e_prima? | ;
t : literal t_prima? ;
t_prima : opmult literal t_prima? | ;

oprel : TKN_GREATER | TKN_LESS | TKN_LEQ | TKN_GEQ | TKN_EQUALS | TKN_DIFF ;
opsuma : TKN_PLUS | TKN_MINUS ;
opmult : TKN_TIMES | TKN_DIV ;

// REGLAS LEXICAS Y TOKENS
ID : [a-zA-Z\u00C0-\u017F][a-zA-Z0-9_\u00C0-\u017F]* ;
TRUE : '"True"' ; // Si a alguien se le ocurre el regex para minus y mayus, que lo ponga
FALSE : '"False"' ;
TKN_TEXT : \"([^\"]*)\" ;
TKN_NUMBER : [0-9]+('.'[0-9]*)? ; 
TKN_PERIOD : '.' ;
TKN_GEQ : '>=' ;
TKN_LEQ : '<=' ;
TKN_EQUALS : '=' ;
TKN_COMMA : ',' ;
TKN_COLON : ':' ;
TKN_LEFT_BRAC : '[' ;
TKN_RIGHT_BRAC : ']' ;
TKN_LEFT_PAREN : '(' ;
TKN_RIGHT_PAREN : ')' ;
TKN_PLUS : '+' ;
TKN_MINUS : '-' ;
TKN_TIMES : '*' ;
TKN_DIV : '/' ;
TKN_DIFF : '<>' ;
TKN_LESS : '<' ;
TKN_GREATER : '>' ;

WS : [ \t\r\n]+ -> skip ;
